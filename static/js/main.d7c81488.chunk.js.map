{"version":3,"sources":["components/FeedItems.jsx","containers/MainPage.jsx","context/url-context.jsx","containers/SideBar.jsx","App.jsx","context/GlobalState.jsx","serviceWorker.js","index.js"],"names":["context","ContentContainer","styled","div","_templateObject","FeedItems","_ref","title","date","content","link","Object","core_browser_esm","style","fontSize","textDecoration","renderHTML","target","rel","href","css","_templateObject2","padding","React","createContext","selectedLink","data","links","MainPageContainer","MainPage_templateObject","MainPage","props","useContext","URLContext","console","log","location","pathname","id","react_default","a","createElement","Fragment","margin","width","name","items","map","item","components_FeedItems","key","guid","pubDate","slice","updateSelectedLink","substring","NavLinkStyle","display","justifyContent","color","alignItems","gridArea","borderRadius","border","background","NavLinkActiveStyle","boxShadow","InputContainer","SideBar_templateObject","ButtonContainer","SideBar_templateObject2","Input","input","_templateObject3","SearchButton","button","_templateObject4","Message","_templateObject5","primary","SideBar","_useState","useState","_useState2","slicedToArray","inputLink","setInputLink","messageDiv","message","type","onChange","event","currentTarget","value","placeholder","onClick","addLinkHandler","role","aria-label","index","NavLink","exact","activeStyle","to","setSelectedLink","wordBreak","removeLinkHandler","timeoutvar","pagelayout","App_templateObject","withRouter","containers_SideBar","Switch","Route","path","component","GlobalState","state","errorMessage","selectedLinkChangeHandler","_this","setState","linkId","find","toString","clearTimeout","setTimeout","newLink","Date","getTime","concat","toConsumableArray","localStorage","setItem","JSON","stringify","removeLink","newLinks","removeIndex","findIndex","splice","parse","getItem","this","prevProps","prevState","_this2","axios","get","then","response","catch","error","alert","url_context","Provider","setLinks","setLinksHandler","children","Component","Boolean","window","hostname","match","ReactDOM","render","context_GlobalState","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7c81488.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport renderHTML from 'react-render-html';\n\nconst ContentContainer = styled.div`\n    border: 1px solid black;\n    box-shadow: 4px 4px 3px 0px #ccc;\n    margin-bottom: 30px;\n    padding: 10px;\n    width: 90%;\n    height: 12.6rem;\n    overflow: hidden;\n    position: relative;\n\n    &:hover {\n        box-shadow: 6px 6px 3px 0px #ccc;\n    }\n`;\n\n\nconst FeedItems = ({ title, date, content, link }) => {\n    return (\n        <ContentContainer> \n            <p>\n                <span style={{ fontSize: '18px', textDecoration: 'underline' }}>\n                    {title}\n                </span> - {date}\n            </p>\n            {renderHTML(content)}\n            <a  target=\"_blank\" rel=\"noopener noreferrer\" href={link} \n                css={css`\n                    position: absolute;\n                    bottom: 0;\n                    left: 0;\n                    right: 10px;\n                    width: 100%;\n                    text-align: end;\n                    margin: 0;\n                    padding: 5px 0;\n                    background-image: linear-gradient(to bottom, transparent, #e8ebef);\n                `}>\n                <span style={{padding: \"10px\"}}>More...</span>\n            </a>\n        </ContentContainer>\n    );\n};\n\nexport default FeedItems;\n","import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\nimport FeedItems from '../components/FeedItems';\nimport URLContext from '../context/url-context';\nlet context;\n\nconst MainPageContainer = styled.div`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    grid-area: main;\n    border-left: 3px solid black;\n    margin-top: 20px;\n`;\n\nconst MainPage = (props) => {\n    context = useContext(URLContext);\n\n    console.log(\"The selectedLink is  -->\", context.selectedLink)\n    console.log(\"Main Component Changed changed **\",props.location.pathname === '/'+ context.selectedLink.id)\n    return (\n        <MainPageContainer>\n\n            {\n                context.selectedLink && context.selectedLink.id ?  \n                    props.location.pathname === '/'+ context.selectedLink.id ? (\n                <>\n                    <h2 style={{ margin: '40px 0', width: '90%' }}>\n                        {context.selectedLink.name}\n                    </h2>\n                    {context.data && context.data.items &&\n                        context.data.items.map((item) => {\n                            return ( <FeedItems\n                                key={item.guid}\n                                link={item.link}\n                                title={item.title}\n                                date={item.pubDate.slice(0,10)}\n                                content={item.content}\n                            />\n                        )})}\n                </>\n            ): context.updateSelectedLink(props.location.pathname.substring(1)): \n            console.log(\"hey\")\n        }\n        </MainPageContainer>\n    );\n};\n\nexport default MainPage;\n","import React from 'react';\n\n\nexport default React.createContext({\n    selectedLink: {},\n    data: {},\n    links: []\n});","import React, { useState, useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport styled from '@emotion/styled';\nimport URLContext from '../context/url-context';\n\n// padding: 20px 0 0 20px;\n// padding: 20px 0 0 20px;\n\nconst NavLinkStyle = {\n    display: 'flex',\n    justifyContent: 'space-between',\n    color: 'black',\n    textDecoration: 'none',\n    alignItems: 'center',\n    padding: '10px',\n    gridArea: 'button',\n    margin: '10px',\n    borderRadius: '5px',\n    border: '1px solid black',\n    background: 'white',\n} \n\nconst NavLinkActiveStyle = {\n    background: \"linear-gradient(#ffffff, #c9c7c7)\",\n    boxShadow: \"2px 3px 4px #ccc\",\n}\n\nconst InputContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    grid-area: input;\n`;\n\nconst ButtonContainer = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    padding-top: 20px;\n    flex-direction: column;\n    border-top: 3px solid black;\n    grid-area: button;\n`;\n\nconst Input = styled.input`\n    height: 20px;\n    width: 150px;\n    padding: 5px;\n    font-size: 14px;\n    margin-right: 10px;\n\n    ::placeholder {\n        font-size: 14px;\n    }\n`;\n\nconst SearchButton = styled.button`\n    border: 1px solid black;\n    height: 2.4rem;\n    width: 2.5rem;\n    border-radius: 5px;\n    background-color: white;\n    padding: 5px;\n`;\n\nconst Message = styled.div`\n    font-size: 12px;\n    color: ${(props) => (props.primary ? 'green' : 'red')};\n`;\n\nconst SideBar = () => {\n    const [inputLink, setInputLink] = useState('');\n\n    const context = useContext(URLContext);\n\n    let messageDiv = context.message ? (\n        context.message === 'Link Added Successfully' ? (\n            <Message primary>{context.message}</Message>\n        ) : (\n            <Message>{context.message}</Message>\n        )\n    ) : null;\n\n    const inputChangeHandler = (event) => {\n        setInputLink(event.currentTarget.value);\n    };\n\n    return (\n        <>\n            <InputContainer>\n                <Input\n                    type=\"text\"\n                    onChange={inputChangeHandler}\n                    value={inputLink}\n                    placeholder=\"Enter the URL here\"\n                />\n                <SearchButton onClick={() => context.addLinkHandler(inputLink)}>\n                    <span role=\"img\" aria-label=\"search\">\n                        &#x1F50E;\n                    </span>\n                </SearchButton>\n            </InputContainer>\n            <ButtonContainer>\n                {messageDiv}\n                {context.links.map((link, index) =>{ \n                    // console.log(\"The link is -->\", link);\n                    return (\n                        <NavLink\n                            exact={true}\n                            style={NavLinkStyle}\n                            activeStyle={NavLinkActiveStyle}\n                            to={\"/\" + link.id}\n                            onClick={() => context.setSelectedLink(link)}\n                            key={link.id}>\n                            <span style={{ wordBreak: 'break-word' }}>{link.name}</span>&nbsp;\n                            <span onClick={() => context.removeLinkHandler(link)}>\n                                X\n                            </span>\n                        </NavLink>\n                )})}\n            </ButtonContainer>\n        </>\n    );\n};\n\nexport default SideBar;\n","import { Switch, Route, withRouter } from 'react-router-dom';\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nimport MainPage from './containers/MainPage';\nimport SideBar from './containers/SideBar';\n\nconst pagelayout = css`\n    width: 100%;\n    height: 100%;\n    display: grid;\n    height: 100vh;\n    grid-gap: 0px 5px;\n    grid-template-columns: 25% 75%;\n    grid-template-rows: [row-1-start] 8rem [row-1end row-2-start] auto [row-2-end];\n    grid-template-areas:\n        'input main'\n        'button main';\n`;\n\nconst App = (props) => {\n\n    console.log(\"App Component changed **\", props, props.location.pathname)\n    return (\n            <div css={pagelayout}> \n                <SideBar />\n                <Switch>\n                    <Route path=\"/:code\" component={MainPage} />\n                    <Route path=\"/\" component={MainPage} />\n                </Switch>\n            </div>\n    );\n};\n\nexport default withRouter(App);\n","import React, { Component } from 'react';\n\nimport axios from 'axios';\nimport URLContext from './url-context';\n\nlet timeoutvar;\n\nclass GlobalState extends Component {\n    state = {\n        selectedLink: {},            \n        links: [],\n        message: '',\n        errorMessage: '',\n        // selectedLink: '',\n        data: {}\n    };\n\n    // componentDidMount() {\n    //     axios\n    //         .get(this.state.selectedLink)\n    //         .then((response) => {\n    //             console.log('The response is -->', response);\n\n    //             this.setState({ data: response.data });\n    //         })\n    //         .catch((error) => {\n    //             console.log('The error is -->', error);\n    //             console.log('Something went wrong !!');\n    //             this.setState({ data: {} });\n    //         });\n    // }\n\n    componentDidMount() {\n\n        let newLinks = JSON.parse(localStorage.getItem('link'));\n        // console.log(\"The new Links are -->\", newLinks)\n        if (newLinks)  this.setState({ links: newLinks})\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        console.log('The selected link is -->', this.state.selectedLink);\n        if(this.state.selectedLink && prevState.selectedLink )\n        if (prevState.selectedLink.id !== this.state.selectedLink.id)\n            axios\n                .get(this.state.selectedLink.name)\n                .then((response) => {\n                    // console.log('The response is -->', response);\n\n                    this.setState({ data: response.data });\n                })\n                .catch((error) => {\n                    console.log('The error is -->',error.message);\n                    this.setState(() => ({ data: {}}), () => {\n                        alert(`${error.message} for ${this.state.selectedLink.name}`)\n                    });\n                    \n                });\n    }\n\n    selectedLinkChangeHandler = (link) => {\n        this.setState({ selectedLink: link });\n    };\n\n    updateSelectedLink = (linkId) => {\n        console.log(\"The state links are -->\",this.state.links, typeof this.state.links[0].id , typeof linkId)\n\n        const link = this.state.links.find( link => link.id.toString() === linkId);\n        console.log(\"The link and linkId is -->\", link, linkId)\n        this.setState({ selectedLink: link})\n\n    }\n\n    addLinkHandler = (inputLink) => {\n        console.log('The timeoutvar  -->', timeoutvar);\n        if (this.state.links.find(link => link.name === inputLink)) {\n            clearTimeout(timeoutvar);\n            this.setState({ message: 'Link Already Present' }, () => {\n                timeoutvar = setTimeout(() => {\n                    this.setState({ message: '' });\n                }, 5000);\n            });\n        } else {\n            clearTimeout(timeoutvar);\n            let newLink = {\n                id: new Date().getTime(),\n                name: inputLink\n            }\n            this.setState({ message: 'Link Added Successfully', links: [newLink, ...this.state.links] },\n                () => {\n                    localStorage.setItem(\n                        'link',\n                        JSON.stringify(this.state.links)\n                    );\n                    timeoutvar = setTimeout(() => {\n                        this.setState({ message: '' });\n                    }, 5000);\n                }\n            );\n        }\n    };\n\n    removeLinkHandler = (removeLink) => {\n        let newLinks = [...this.state.links];\n        // console.log('remove link is -->', newLinks, removeLink);\n        let removeIndex = newLinks.findIndex((link) => {\n            return link.id === removeLink.id;\n        });\n        // console.log('The removeIndex is  ==>', removeIndex);\n        newLinks.splice(removeIndex, 1);\n        // console.log('Now the new Links is -->', newLinks);\n        this.setState({ links: newLinks });\n        localStorage.setItem('link', JSON.stringify(newLinks));\n    };\n\n\n\n    render() {\n        console.log(\"Global State changed changed **\")\n\n        return (\n        <URLContext.Provider\n                value={{\n                    data: this.state.data,\n                    selectedLink: this.state.selectedLink,\n                    setSelectedLink: this.selectedLinkChangeHandler,\n                    setLinks: this.setLinksHandler,\n                    removeLinkHandler: this.removeLinkHandler,\n                    addLinkHandler: this.addLinkHandler,\n                    message: this.state.message,\n                    links: this.state.links,\n                    updateSelectedLink: this.updateSelectedLink\n                }}>\n\n                {this.props.children}\n            </URLContext.Provider>\n        );\n    }\n}\n\nexport default GlobalState;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport GlobalState from './context/GlobalState';\n\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <GlobalState>\n        <BrowserRouter> \n            <App />\n        </BrowserRouter>\n    </GlobalState>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}